# Для генерации пароля будем использовать следующую функцию
def generate_password(n):
# Для числа n (в диапазоне от 3 до 20) каждая пара чисел должна удовлетворять
# условию кратности n.
    result = "" # Это накопитель итогового пароля
# Далее перебираем все числа в диапазоне от 1 до n-1
# используя цикл for.
    for i in range(1, n):
        for j in range(i + 1, n + 1):
# и проверяем числа после текущего i
            if n % (i + j) == 0:
# далее проверяем на кратность
                result += str(i) + str(j)
# Формируем пару и добавляем её в результат
    return result

# Теперь как будет работать основная программа
if __name__ == "__main__":
# Ввод и проверка числа:
# Пользователь вводит с клавиатуры число n от 3 до 20, и программа проверяет корректность
# ввода с помощью try/except.
    while True:
        try:
            n = int(input("Введите число (от 3 до 20): "))
            if 3 <= n <= 20:
                break
            else:
                print("Число должно быть в диапазоне от 3 до 20.")
        except ValueError:
            print("Пожалуйста, введите целое число.")

# После генерации пароля для заданного числа n программа выводит результат на экран.
    password = generate_password(n)
    print(f"Сгенерированный пароль для числа {n}: {password}")

# коментарий:

# Внешний цикл for i in range(1, n) перебирает первое число пары.
# Вложенный цикл for j in range(i + 1, n + 1) перебирает второе число пары,
# чтобы избежать повторных пар начинаем с числа, следующего за i
# (например, пары 1+2 и 2+1 считаются одинаковыми).

# Проверяем кратность:
# Условие if n % (i + j) == 0 проверяет, делится ли число n на сумму текущей пары чисел
# (i + j) без остатка.
# Если условие кратности выполняется, текущая пара чисел i и j преобразуется в строку и
# добавляется к переменной result.

# Пример кратности(деления без остатка):
# 1 + 2 = 3 (сумма пары)
# 9 / 3 = 3 (ровно 3 без остатка)
# 9 кратно 3 (9 делится на 3 без остатка)

# Пример 1:
# 9 - число из первой вставки
# 1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары;
# число 9 кратно сумме каждой пары)

# Пример 2:
# 11 - число из первой вставки
# 11029384756 - нужный пароль (1 и 10, 2 и 9, 3 и 8, 4 и 7, 5 и 6 - пары;
# число 11 кратно сумме каждой пары)

# Все пароли для чисел от 3 до 20 (для сверки):
#
# 3 - 12
# 4 - 13
# 5 - 1423
# 6 - 121524
# 7 - 162534
# 8 - 13172635
# 9 - 1218273645
# 10 - 141923283746
# 11 - 11029384756
# 12 - 12131511124210394857
# 13 - 112211310495867
# 14 - 1611325212343114105968
# 15 - 1214114232133124115106978
# 16 - 1317115262143531341251161079
# 17 - 11621531441351261171089
# 18 - 12151811724272163631545414513612711810
# 19 - 118217316415514613712811910
# 20 - 13141911923282183731746416515614713812911
#
# # Все пароли отдельно по числам, для наглядности как работает формирование пар:
#
# 3 - 1+2
# 4 - 1+3
# 5 - 1+4 2+3
# 6 - 1+2 1+5 2+4
# 7 - 1+6 2+5 3+4
# ...
# 19 - 1+18 2+17 3+16 4+15 5+14 6+13 7+12 8+11 9+10
# 20 - 1+3 1+4 1+9 1+19 2+3 2+8 2+18 3+7 3+17 4+6 4+16 5+15 6+14 7+13 8+12 9+11
#
# Пример работы программы:
# Вводим число (от 3 до 20): 9
# Сгенерированный пароль для числа 9: 1218273645
# Вводим число (от 3 до 20): 11
# Сгенерированный пароль для числа 11: 11029384756
# Вводим число (от 3 до 20): 6
# Сгенерированный пароль для числа 6: 1215246
#
# Проверка с примерами из задания
# Число 3:
# Пары: (1, 2)
# Пароль: 12
#
# Число 4:
# Пары: (1, 3)
# Пароль: 13
#
# Число 5:
# Пары: (1, 4), (2, 3)
# Пароль: 1423
#
# Число 6:
# Пары: (1, 2), (1, 5), (2, 4)
# Пароль: 121524
#
# Число 9:
# Пары: (1, 2), (1, 8), (2, 7), (3, 6), (4, 5)
# Пароль: 1218273645